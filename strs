#include "shell.h"

 /**
   * _cat - concatinates two strings
     * @path: Destination of the string to be appended
       * @stpth: String appended to path
         * Return: pointer to the resulting string
	   */
	    char *_cat(char *path, char *stpth)
	     {
	              int path_idx = 0, st_idx = 0;

         for (; path[path_idx] != '\0'; path_idx++)
	                  ;
			           for (; stpth[st_idx] != '\0'; st_idx++)
				            {
					                     path[path_idx] = stpth[st_idx];
							                      path_idx++;
									               }
										                path[path_idx] = '\0';
												         return (path);
													  }


 /**
   * _cpy - copies the string pointed to by stpth to path
     * @path: destination of the copied string
       * @stpth: source of the string to be copied to <path>
         * Return: pointer to the updated string after copying (path)
	   */

 char *_cpy(char *path, char *stpth)
  {
           int idx;

         for (idx = 0; stpth[idx] != '\0'; idx++)
	                  path[idx] = stpth[idx];
			           path[idx] = '\0';
				            return (path);
					     }


 /**
   * _dup - allocate & return memory for a string duplicate
     * @str: string to return a memory to its duplicate
       * Return: memory to the string duplicate
        */
	 char *_dup(char *string)
	  {
	           char *pointer_mem *pointer_mem_char;
		            size_t length;

         if (!string)
	                  return (NULL);

         for (length = 0; string[length]; length++)
	                  ;

         pointer_mem = malloc(sizeof(char) * length + 1);
	          if (!pointer_mem)
		                   return (NULL);

         pointer_mem_char = pointer_mem;

         while (*string)
	          {
		                   *pointer_mem_char = *string;
				                    string++;
						                     pointer_mem_char++;
								              }
									               *pointer_mem_char = '\0';
										                return (pointer_mem);
												 }

 /**
   * _compare - compares 2 strings
     * @string1: first string to be compared with
       * @string2: second string compared on/with first string
         * Return: 0 if equal, positive if string1 < string2, negative if string1 > string2
	   */
	    int _compare(char *string1, char *string2)
	     {
	              int idx = 0;

         for (; string1[idx] != '\0' || string2[idx] != '\0'; idx++)
	          {
		                   if (string[idx] != string2[idx])
				                            return (string1[idx] - string2[idx]);
							             }
								              return (0);
									       }

 /**
   * _leng - returns the lenth of a string
     * @string: Paremeter to count
       * Return: length.
         */

 int _leng(char *string)
  {
           int leng = 0;

         while (*string != '\0')
	          {
		                   string++;
				                    leng++;
						             }
							              returnÂ (}